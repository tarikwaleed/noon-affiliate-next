/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/oBOxMBYhjKo
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button"
import { CardHeader, CardContent, Card } from "@/components/ui/card"
import { ResponsiveLine } from "@nivo/line"
import { ShoppingBag, DollarSign, ClipboardIcon, WalletIcon } from 'lucide-react'
import { useEffect, useState } from "react";
import { CouponDetails, PerformanceData } from '@/lib/types'
import Link from "next/link";

export function CouponCard({ couponCode }: { couponCode: string | undefined }) {
  const [copied, setCopied] = useState<boolean>(false);
  const [couponDetails, setCouponDetails] = useState<CouponDetails | null>(null)
  const copyToClipboard = () => {
    if (couponCode) {
      navigator.clipboard.writeText(couponCode)
        .then(() => {
          setCopied(true);
          console.log('Coupon code copied to clipboard!');
          setTimeout(() => setCopied(false), 1000);
        })
        .catch(err => {
          console.error('Failed to copy coupon code:', err);
        });
    }
  };

  useEffect(() => {
    if (couponCode) {
      const getCouponDetails = async () => {
        const res = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_API_URL}/sales?coupon_code=${couponCode}`)
        const json = await res.json()
        console.log(json)
        if (res.status == 200) {
          setCouponDetails(json)
        }
      }
      getCouponDetails()
    }
  }, [couponCode])

  return (

    <Card className="w-full max-w-4xl">
      <CardHeader className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <div className="bg-primary px-3 py-1 rounded-full text-white text-sm font-medium">{couponCode}</div>
          <Button
            size="sm" variant="outline"
            onClick={() => {
              copyToClipboard()
            }}
          >
            <ClipboardIcon className="w-4 h-4" />
            {copied ? <span>Copied</span> : <span>Copy</span>}
          </Button>
        </div>
      </CardHeader>

      <CardContent className="grid gap-6">
        {couponDetails != null ?
          <>
            <div className="flex flex-col items-center justify-center bg-green-300 p-6 rounded-lg">
              <h2 className="text-2xl font-bold mb-2">Your Commission</h2>
              <p className="text-8xl font-bold text-green-700">{couponDetails?.commission}</p>
              <Link href={`https://wa.me/966543486623?text=%D8%A3%D8%B1%D9%8A%D8%AF%20%D8%B3%D8%AD%D8%A8%20%D8%B9%D9%85%D9%88%D9%84%D8%A7%D8%AA%D9%8A%20%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%B5%D9%85%20%D8%A7%D9%84%D9%85%D9%85%D9%8A%D8%B2%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D9%8A%20%D9%87%D9%88%20${couponCode}`}>
                <Button className="mt-4">
                  <WalletIcon className="w-4 h-4 mr-2" />
                  Withdraw Commission
                </Button>
              </Link>
            </div>
            <div className="grid md:grid-cols-1 lg:grid-cols-3 gap-4">
              {/* Total Orders */}
              <Card className="bg-slate-300">
                <CardHeader>
                  <div className="flex gap-2 items-center">
                    <ShoppingBag className="w-5 h-5 text-gray-500 dark:text-gray-400" />
                    <span>Total Orders</span>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="font-medium">
                    {couponDetails?.num_total_orders}
                  </p>
                </CardContent>
              </Card>

              {/* Total order value */}
              <Card className="bg-red-200">
                <CardHeader>
                  <div className="flex gap-2 items-center">
                    <DollarSign className="w-5 h-5 text-gray-500 dark:text-gray-400" />
                    <span>Total Orders value</span>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="font-medium">
                    {couponDetails?.total_order_value}
                  </p>
                </CardContent>
              </Card>

              {/* Average order value */}
              <Card className="bg-yellow-200">
                <CardHeader>
                  <div className="flex gap-2 items-center">
                    <DollarSign className="w-5 h-5 text-gray-500 dark:text-gray-400" />
                    <span>Average Order Value</span>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="font-medium">
                    {couponDetails?.average_order_value}
                  </p>
                </CardContent>
              </Card>
            </div>

            {/* Order Trend */}
            <div className="pt-20" />
            <div className="grid md:grid-cols-1 gap-6">
              <div>
                <h4 className="text-4xl mb-4">Order Performance in the last 6 months</h4>
                <>

                  {couponDetails?.performance_data &&
                    <div
                      //  className="aspect-[16/9]"
                      className="w-full h-96"
                    >
                      <LineChart
                        data={couponDetails?.performance_data}
                      />
                    </div>
                  }
                </>
              </div>
            </div>
          </>
          :
          <>
            <div className="text-7xl">
              Your Coupon didn't get any orders Yet
            </div>
          </>}


      </CardContent>
    </Card >
  )
}



const LineChart = ({ data }: { data: PerformanceData[] }) => (
  <ResponsiveLine
    data={data}
    margin={{ top: 50, right: 110, bottom: 50, left: 60 }}
    xScale={{ type: 'point' }}
    yScale={{
      type: 'linear',
      min: 'auto',
      max: 'auto',
      stacked: true,
      reverse: false
    }}
    yFormat=" >-.2f"
    axisTop={null}
    axisRight={null}
    axisBottom={{
      tickSize: 5,
      tickPadding: 5,
      tickRotation: 0,
      legend: 'Time',
      legendOffset: 36,
      legendPosition: 'middle',
      truncateTickAt: 0
    }}
    axisLeft={{
      tickSize: 5,
      tickPadding: 5,
      tickRotation: 0,
      legend: 'Total Order Values',
      legendOffset: -40,
      legendPosition: 'middle',
      truncateTickAt: 0
    }}
    pointSize={10}
    pointColor={{ theme: 'background' }}
    pointBorderWidth={2}
    pointBorderColor={{ from: 'serieColor' }}
    pointLabel="data.yFormatted"
    pointLabelYOffset={-12}
    enableTouchCrosshair={true}
    useMesh={true}
    legends={[
      {
        anchor: 'bottom-right',
        direction: 'column',
        justify: false,
        translateX: 100,
        translateY: 0,
        itemsSpacing: 0,
        itemDirection: 'left-to-right',
        itemWidth: 80,
        itemHeight: 20,
        itemOpacity: 0.75,
        symbolSize: 12,
        symbolShape: 'circle',
        symbolBorderColor: 'rgba(0, 0, 0, .5)',
        effects: [
          {
            on: 'hover',
            style: {
              itemBackground: 'rgba(0, 0, 0, .03)',
              itemOpacity: 1
            }
          }
        ]
      }
    ]}
  />
)

